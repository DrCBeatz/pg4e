
COURSE 2
========

WEEK 1 - FULL TEXT SEARCHES
===========================


WEEK 2 - JSON / KEY-VALUE DATA
==============================

CREATE UNIQUE INDEX j_uuid_idx ON jsontable(((j->>'uuid')::uuid));
CREATE INDEX idxgintags ON api USING gin ((jdoc -> 'tags'));
ALTER TABLE jsontable ADD CONSTRAINT uuid_must_exist CHECK (j ? 'uuid');

WEEK 3 - ELASTIC SEARCH
=======================

Lecture 1 - SQL / noSQL

Lecture 2 - Elastic Search

Data model as continuum
Car model, fuel tank size, tank type, fuel type, 
Sometimes new columns, and new tables and foreign keys are not the answer.
Casandra, Elastic, Mongo

Tags as application?

ACID
BASE

SQL strikes back

https://blog.patricktriest.com/text-search-docker-elasticsearch/

https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html

https://www.guru99.com/sql-vs-nosql.html

https://www.youtube.com/watch?v=rRoy6I4gKWU

https://blog.timescale.com/blog/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a/

https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46103.pdf

Tech Loop

https://www.youtube.com/watch?v=7Pg5AMSInJ0

SELECT FOR UPDATE

SELECT FOR UPDATE NOWAIT

https://www.postgresql.org/docs/current/transaction-iso.html

INSERT with an ON CONFLICT DO NOTHING

https://www.postgresql.org/docs/current/sql-set-transaction.html

    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }
    READ WRITE | READ ONLY
    [ NOT ] DEFERRABLE

https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PostgreSQL.Replication.ReadReplicas.html

2013:

https://www.intervision.com/5-best-practices-database-scaling/

https://www.red-gate.com/simple-talk/cloud/cloud-data/designing-highly-scalable-database-architectures/



WEEK 4 - PANDAS AND SQL
=======================

https://pandas.pydata.org/pandas-docs/stable/getting_started/comparison/comparison_with_sql.html

https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html



TODO
====

DUMP / RESTORE
--------------

https://www.postgresql.org/docs/9.1/backup-dump.html

pg_dump dbname > outfile

psql dbname < infile

INDEXES AND PERFORMANCE
-----------------------

VIEWS
----- 

You can “hide” complexity with a view.   You can create a view with computed columns, which can prove quite handy. You can limit access by use of views as well restrict certain dB users to read-only views.  


PROCEDURES
----------

Stored Procedures

Before, After, or Instead of INSERT, UPDATE, or DELETE

http://www.postgresqltutorial.com/postgresql-create-procedure/

Triggers

CREATE  TRIGGER trigger_name [BEFORE|AFTER|INSTEAD OF] [INSERT|UPDATE|DELETE] OF column_name
ON table_name
[
];

TODO
----

WITH / Common Table Expressions

Doing it in Python

PERCENT_RANK

HSTORE :)
