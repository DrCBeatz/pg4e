
STRINGS (4)
===========

Generating data in a database

String functions - Split_part
  || Concatenate also CONCAT('a', 'b') concat_ws(',', 'a', 'b') (separators)
https://www.postgresql.org/docs/9.1/functions-string.html

LIKE / SIMILAR TO

https://www.postgresql.org/docs/8.1/functions-matching.html

LIKE ~~ / NOT LIKE   !~~ % many chars, _ one char
ILIKE ~~* / NOT ILIKE !~~*
SIMILAR TO / NOT SIMILAR TO   Hybrid SQL / Regex matching
REGEX:
  ~ Matches
  ~* Matches case insensitive
  !~ Does not match
  !~* Does not match case insensitive

Index review Text with and without unique 

trunc()

EXPLAIN

INDEX Strings with long lengths

HASH Functions - String of any length -> string of fixed length
   One way
   MD5
   Rainbow tables
   SHA256
   Collision

Field length

CHECK CONSTRAINT !

Character Sets - UTF-8 - Grab slides from PY4E

HASH Functions


REGEXP POSIX Variant
https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-POSIX-REGEXP

substring(string from pattern) - Extracts first regex match or null
REGEXP_MATCHES() - Returns an array of matches

regexp_replace(source, pattern, replacement [, 'gi'])


COURSE 2
========

JSON FIELDS
===========

Casting using :: or CAST(value AS type)
https://stackoverflow.com/questions/15537709/what-does-do-in-postgresql
https://stackoverflow.com/questions/5758499/double-colon-notation-in-sql


Operators @>
https://www.postgresql.org/docs/9.5/functions-json.html

Contain

'{"a":1, "b":2}'::jsonb @> '{"b":2}'::jsonb

JSON
JSONB

https://blog.hagander.net/json-field-constraints-228/
https://www.postgresql.org/docs/9.5/datatype-json.html#JSON-INDEXING

CREATE TABLE jsontable (j jsonb NOT NULL);
-- All of the keys - a bit of overkill
CREATE INDEX j_idx ON jsontable USING gin(j jsonb_path_ops);
-- Just one key
CREATE UNIQUE INDEX j_uuid_idx ON jsontable(((j->>'uuid')::uuid));
CREATE INDEX idxgintags ON api USING gin ((jdoc -> 'tags'));
ALTER TABLE jsontable ADD CONSTRAINT uuid_must_exist CHECK (j ? 'uuid');

SELECT count(*) FROM cards WHERE data->>'finished' = 'true';

-> and --> operators

jsonb_path_ops means index can only handle @>
The technical difference between a jsonb_ops and a jsonb_path_ops GIN index is that
jsonb_ops creates independent index items for each key and value in the data,
while jsonb_path_ops creates index items only for each value in the data. 
Basically, each jsonb_path_ops index item is a hash of the value and the
key(s) leading to it.

DUMP / RESTORE
--------------

https://www.postgresql.org/docs/9.1/backup-dump.html

pg_dump dbname > outfile

psql dbname < infile

PERFORMANCE
-----------

Explain Queries

Index Types
B-Tree versus BRIN (Range) Indexes
GIN - Words not LIKE
GiST - Words not LIKE
https://en.wikipedia.org/wiki/Block_Range_Index


PROCEDURES
---------

Stored Procedures

Before, After, or Instead of INSERT, UPDATE, or DELETE

http://www.postgresqltutorial.com/postgresql-create-procedure/

Triggers

CREATE  TRIGGER trigger_name [BEFORE|AFTER|INSTEAD OF] [INSERT|UPDATE|DELETE] OF column_name
ON table_name
[
];


FULL TEXT SEARCHES
------------------

ts_vector
GIN  - Generalized inverted - Perfect - Slow update, fast select
GiST - Generalized Search Tree - Lossy - Hash - Fast update, slow select

SELECT to_tsvector('It''s kind of fun to do the impossible') @@ to_tsquery('impossible');

TODO
----

WITH / Common Table Expressions

Doing it in Python

VIEWS
----- 

You can “hide” complexity with a view.   You can create a view with computed columns, which can prove quite handy. You can limit access by use of views as well restrict certain dB users to read-only views.  

PERCENT_RANK
